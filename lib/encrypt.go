package lib

import (
	"crypto/aes"
	"crypto/cipher"
	"crypto/hmac"
	"crypto/md5"
	"crypto/rand"
	"crypto/rsa"
	"crypto/sha1"
	"crypto/sha256"
	"crypto/sha512"
	"crypto/x509"
	"encoding/hex"
	"encoding/pem"
	"errors"
	"io"
	"time"
)

var (
	// defaultRsaPrivateKey default rsa private key
	defaultRsaPrivateKey = []byte{45, 45, 45, 45, 45, 66, 69, 71, 73, 78, 32, 80, 82, 73, 86, 65, 84, 69, 32, 75, 69, 89, 45, 45, 45, 45, 45, 10, 77, 73, 73, 69, 117, 119, 73, 66, 65, 68, 65, 78, 66, 103, 107, 113, 104, 107, 105, 71, 57, 119, 48, 66, 65, 81, 69, 70, 65, 65, 83, 67, 66, 75, 85, 119, 103, 103, 83, 104, 65, 103, 69, 65, 65, 111, 73, 66, 65, 81, 67, 105, 55, 98, 114, 100, 68, 117, 66, 72, 76, 65, 108, 121, 10, 84, 68, 56, 104, 103, 75, 104, 50, 83, 83, 83, 103, 118, 107, 78, 111, 97, 77, 56, 53, 71, 73, 75, 119, 88, 106, 75, 105, 103, 82, 108, 75, 113, 122, 103, 83, 103, 68, 110, 105, 71, 99, 83, 65, 90, 111, 43, 70, 53, 97, 73, 69, 80, 68, 51, 70, 112, 107, 112, 113, 121, 43, 103, 103, 10, 82, 83, 51, 98, 104, 52, 49, 71, 75, 116, 78, 88, 72, 73, 87, 43, 115, 84, 110, 72, 104, 78, 116, 100, 120, 119, 71, 48, 75, 85, 114, 107, 69, 85, 100, 78, 101, 120, 109, 47, 122, 100, 47, 120, 74, 98, 49, 103, 70, 112, 67, 100, 73, 104, 76, 68, 55, 70, 77, 70, 102, 77, 85, 56, 10, 100, 52, 98, 74, 67, 56, 49, 80, 97, 105, 90, 104, 68, 74, 104, 84, 106, 89, 111, 115, 121, 110, 86, 78, 90, 84, 50, 51, 84, 116, 87, 88, 103, 99, 72, 112, 50, 87, 53, 80, 49, 53, 78, 51, 110, 122, 78, 121, 113, 86, 114, 77, 87, 69, 55, 116, 90, 104, 97, 47, 66, 54, 113, 52, 10, 114, 86, 83, 111, 103, 97, 70, 53, 48, 115, 113, 82, 57, 119, 122, 113, 112, 90, 47, 54, 70, 121, 76, 88, 43, 119, 99, 79, 57, 88, 83, 48, 70, 101, 56, 85, 86, 80, 74, 83, 53, 69, 82, 85, 115, 50, 72, 47, 74, 70, 117, 55, 99, 54, 113, 99, 111, 52, 80, 98, 114, 115, 71, 121, 10, 101, 116, 118, 111, 56, 51, 85, 111, 67, 89, 72, 118, 81, 90, 43, 88, 103, 87, 66, 56, 106, 85, 78, 56, 78, 66, 113, 76, 97, 74, 65, 83, 106, 84, 47, 111, 108, 118, 118, 75, 79, 67, 84, 48, 105, 71, 120, 109, 108, 111, 108, 70, 110, 104, 119, 100, 51, 100, 47, 50, 43, 117, 100, 106, 10, 52, 110, 52, 51, 84, 53, 97, 108, 65, 103, 77, 66, 65, 65, 69, 67, 103, 102, 56, 109, 99, 105, 70, 78, 67, 53, 52, 117, 118, 78, 77, 103, 75, 104, 57, 88, 110, 108, 112, 72, 113, 67, 109, 106, 102, 47, 68, 98, 108, 76, 81, 90, 74, 68, 69, 81, 77, 99, 65, 67, 108, 89, 79, 120, 10, 55, 97, 118, 77, 65, 118, 119, 118, 66, 85, 65, 90, 72, 121, 67, 112, 67, 81, 104, 80, 122, 118, 80, 69, 109, 54, 107, 111, 50, 69, 57, 109, 82, 56, 69, 70, 118, 47, 73, 79, 97, 83, 74, 52, 118, 111, 104, 47, 111, 82, 98, 47, 116, 50, 103, 70, 56, 113, 47, 65, 117, 80, 50, 122, 10, 68, 116, 100, 89, 118, 97, 87, 74, 86, 116, 83, 101, 49, 100, 49, 67, 109, 56, 87, 84, 118, 118, 53, 103, 105, 120, 111, 89, 108, 116, 111, 115, 70, 57, 65, 105, 70, 69, 101, 107, 100, 66, 54, 75, 115, 106, 82, 108, 69, 111, 88, 82, 121, 108, 54, 80, 90, 108, 107, 98, 120, 120, 108, 97, 10, 84, 43, 51, 75, 111, 97, 77, 87, 57, 84, 47, 115, 97, 81, 77, 88, 55, 86, 81, 120, 65, 112, 80, 77, 119, 74, 106, 70, 109, 117, 113, 79, 65, 52, 50, 52, 77, 104, 49, 90, 98, 85, 109, 70, 55, 74, 81, 117, 115, 77, 103, 74, 99, 83, 49, 120, 116, 109, 52, 115, 78, 65, 54, 48, 10, 56, 89, 121, 79, 101, 73, 121, 55, 87, 122, 99, 117, 99, 69, 75, 66, 85, 86, 88, 54, 89, 72, 77, 120, 84, 87, 67, 56, 98, 78, 70, 69, 99, 54, 109, 53, 114, 122, 52, 57, 120, 119, 120, 50, 104, 67, 100, 79, 49, 71, 118, 99, 106, 111, 117, 82, 101, 66, 98, 88, 77, 55, 47, 119, 10, 56, 119, 43, 81, 108, 106, 47, 87, 57, 82, 80, 99, 56, 53, 102, 100, 115, 114, 99, 111, 119, 43, 104, 118, 73, 47, 109, 72, 55, 66, 52, 84, 69, 69, 115, 78, 113, 112, 107, 67, 103, 89, 69, 65, 49, 67, 67, 54, 99, 80, 104, 107, 48, 66, 112, 88, 112, 75, 116, 110, 101, 49, 120, 105, 10, 83, 51, 98, 97, 84, 66, 57, 108, 116, 80, 117, 68, 53, 53, 78, 88, 98, 49, 107, 83, 116, 99, 65, 112, 65, 108, 97, 103, 90, 106, 76, 113, 108, 73, 110, 121, 73, 55, 118, 79, 43, 84, 57, 120, 72, 56, 77, 71, 106, 103, 75, 72, 121, 51, 98, 54, 56, 57, 97, 81, 118, 103, 113, 86, 10, 50, 113, 57, 98, 68, 111, 112, 55, 102, 48, 57, 47, 106, 49, 88, 114, 65, 103, 49, 114, 118, 89, 56, 121, 98, 121, 99, 54, 50, 108, 101, 102, 121, 101, 49, 97, 87, 49, 115, 111, 117, 89, 49, 100, 109, 51, 116, 43, 52, 57, 65, 83, 77, 80, 74, 85, 121, 119, 56, 107, 77, 115, 118, 100, 10, 102, 118, 51, 49, 71, 80, 65, 110, 67, 98, 66, 87, 110, 51, 50, 99, 116, 106, 89, 74, 112, 78, 107, 67, 103, 89, 69, 65, 120, 75, 65, 99, 106, 118, 87, 108, 67, 81, 97, 50, 112, 85, 82, 53, 65, 97, 79, 76, 121, 99, 47, 118, 77, 72, 54, 52, 119, 71, 82, 68, 114, 112, 57, 52, 10, 65, 116, 65, 82, 115, 97, 49, 47, 83, 109, 84, 53, 51, 97, 82, 102, 73, 81, 56, 70, 68, 99, 67, 101, 122, 76, 49, 110, 109, 113, 98, 107, 53, 104, 71, 43, 73, 75, 97, 100, 66, 105, 118, 84, 116, 119, 103, 90, 99, 119, 51, 56, 89, 120, 86, 90, 52, 65, 51, 73, 73, 67, 102, 75, 10, 117, 100, 50, 115, 122, 87, 43, 113, 110, 82, 69, 57, 119, 89, 89, 56, 48, 74, 90, 69, 115, 85, 104, 106, 56, 67, 51, 71, 103, 107, 107, 65, 80, 103, 43, 70, 80, 110, 81, 121, 52, 71, 70, 48, 53, 88, 68, 68, 106, 68, 50, 51, 80, 47, 48, 79, 53, 106, 51, 55, 98, 110, 68, 106, 10, 80, 112, 116, 109, 115, 75, 48, 67, 103, 89, 65, 99, 49, 85, 89, 67, 84, 81, 69, 71, 43, 69, 50, 112, 97, 70, 76, 115, 104, 97, 89, 109, 115, 56, 85, 65, 83, 57, 81, 55, 81, 87, 83, 119, 101, 87, 113, 78, 68, 65, 74, 114, 67, 101, 43, 74, 68, 100, 86, 72, 106, 117, 119, 114, 10, 118, 73, 82, 90, 76, 120, 72, 50, 57, 120, 83, 100, 83, 74, 106, 47, 102, 73, 67, 81, 117, 49, 57, 111, 47, 87, 85, 51, 76, 54, 69, 109, 49, 71, 99, 65, 70, 118, 113, 113, 86, 49, 102, 122, 86, 54, 53, 86, 51, 82, 85, 106, 56, 117, 55, 99, 66, 79, 48, 79, 43, 74, 73, 84, 10, 108, 70, 117, 80, 120, 49, 104, 70, 119, 70, 49, 85, 52, 80, 104, 105, 90, 115, 110, 83, 78, 86, 52, 112, 75, 54, 109, 122, 55, 100, 110, 120, 104, 80, 116, 110, 112, 70, 122, 113, 67, 68, 110, 57, 43, 56, 106, 116, 83, 51, 77, 77, 73, 81, 75, 66, 103, 81, 68, 67, 103, 50, 90, 100, 10, 73, 114, 78, 87, 72, 53, 99, 87, 72, 89, 118, 98, 122, 67, 47, 103, 119, 78, 120, 116, 122, 66, 55, 50, 55, 80, 108, 114, 121, 89, 82, 79, 118, 65, 109, 86, 68, 80, 55, 77, 50, 79, 71, 54, 109, 118, 52, 107, 49, 82, 102, 53, 120, 43, 69, 81, 121, 66, 113, 122, 67, 111, 71, 77, 10, 47, 71, 90, 114, 74, 73, 104, 89, 98, 52, 106, 116, 71, 52, 48, 90, 110, 101, 57, 100, 69, 101, 85, 115, 87, 108, 88, 116, 81, 90, 65, 121, 109, 82, 74, 50, 49, 81, 52, 105, 102, 99, 106, 114, 74, 117, 73, 73, 115, 50, 57, 88, 78, 106, 98, 118, 104, 107, 108, 72, 51, 47, 72, 109, 10, 99, 122, 73, 115, 87, 52, 86, 116, 74, 100, 119, 102, 107, 112, 78, 81, 114, 69, 107, 90, 101, 122, 49, 47, 70, 106, 103, 105, 120, 72, 104, 54, 71, 102, 47, 88, 114, 81, 75, 66, 103, 68, 112, 68, 52, 120, 108, 110, 49, 112, 102, 54, 89, 84, 114, 89, 102, 109, 73, 105, 100, 83, 76, 71, 10, 82, 104, 101, 56, 109, 52, 107, 56, 121, 106, 101, 98, 114, 68, 76, 116, 43, 69, 105, 104, 52, 118, 65, 85, 102, 99, 114, 115, 56, 48, 106, 54, 117, 57, 84, 50, 121, 113, 109, 115, 111, 77, 68, 74, 49, 90, 65, 49, 85, 81, 69, 82, 83, 43, 79, 86, 75, 67, 85, 84, 116, 97, 88, 43, 10, 103, 43, 98, 121, 105, 82, 106, 120, 81, 118, 74, 89, 121, 114, 66, 51, 55, 53, 112, 106, 109, 104, 75, 56, 48, 78, 105, 104, 114, 47, 102, 119, 106, 75, 102, 80, 106, 67, 82, 76, 90, 69, 79, 107, 80, 86, 54, 55, 104, 78, 112, 122, 80, 66, 83, 72, 109, 104, 48, 106, 75, 113, 75, 111, 10, 77, 90, 50, 74, 79, 75, 106, 88, 48, 43, 84, 115, 52, 55, 90, 53, 106, 77, 48, 47, 10, 45, 45, 45, 45, 45, 69, 78, 68, 32, 80, 82, 73, 86, 65, 84, 69, 32, 75, 69, 89, 45, 45, 45, 45, 45, 10}

	// defaultRsaPublicKey default rsa public key
	defaultRsaPublicKey = []byte{45, 45, 45, 45, 45, 66, 69, 71, 73, 78, 32, 80, 85, 66, 76, 73, 67, 32, 75, 69, 89, 45, 45, 45, 45, 45, 10, 77, 73, 73, 66, 73, 106, 65, 78, 66, 103, 107, 113, 104, 107, 105, 71, 57, 119, 48, 66, 65, 81, 69, 70, 65, 65, 79, 67, 65, 81, 56, 65, 77, 73, 73, 66, 67, 103, 75, 67, 65, 81, 69, 65, 111, 117, 50, 54, 51, 81, 55, 103, 82, 121, 119, 74, 99, 107, 119, 47, 73, 89, 67, 111, 10, 100, 107, 107, 107, 111, 76, 53, 68, 97, 71, 106, 80, 79, 82, 105, 67, 115, 70, 52, 121, 111, 111, 69, 90, 83, 113, 115, 52, 69, 111, 65, 53, 52, 104, 110, 69, 103, 71, 97, 80, 104, 101, 87, 105, 66, 68, 119, 57, 120, 97, 90, 75, 97, 115, 118, 111, 73, 69, 85, 116, 50, 52, 101, 78, 10, 82, 105, 114, 84, 86, 120, 121, 70, 118, 114, 69, 53, 120, 52, 84, 98, 88, 99, 99, 66, 116, 67, 108, 75, 53, 66, 70, 72, 84, 88, 115, 90, 118, 56, 51, 102, 56, 83, 87, 57, 89, 66, 97, 81, 110, 83, 73, 83, 119, 43, 120, 84, 66, 88, 122, 70, 80, 72, 101, 71, 121, 81, 118, 78, 10, 84, 50, 111, 109, 89, 81, 121, 89, 85, 52, 50, 75, 76, 77, 112, 49, 84, 87, 85, 57, 116, 48, 55, 86, 108, 52, 72, 66, 54, 100, 108, 117, 84, 57, 101, 84, 100, 53, 56, 122, 99, 113, 108, 97, 122, 70, 104, 79, 55, 87, 89, 87, 118, 119, 101, 113, 117, 75, 49, 85, 113, 73, 71, 104, 10, 101, 100, 76, 75, 107, 102, 99, 77, 54, 113, 87, 102, 43, 104, 99, 105, 49, 47, 115, 72, 68, 118, 86, 48, 116, 66, 88, 118, 70, 70, 84, 121, 85, 117, 82, 69, 86, 76, 78, 104, 47, 121, 82, 98, 117, 51, 79, 113, 110, 75, 79, 68, 50, 54, 55, 66, 115, 110, 114, 98, 54, 80, 78, 49, 10, 75, 65, 109, 66, 55, 48, 71, 102, 108, 52, 70, 103, 102, 73, 49, 68, 102, 68, 81, 97, 105, 50, 105, 81, 69, 111, 48, 47, 54, 74, 98, 55, 121, 106, 103, 107, 57, 73, 104, 115, 90, 112, 97, 74, 82, 90, 52, 99, 72, 100, 51, 102, 57, 118, 114, 110, 89, 43, 74, 43, 78, 48, 43, 87, 10, 112, 81, 73, 68, 65, 81, 65, 66, 10, 45, 45, 45, 45, 45, 69, 78, 68, 32, 80, 85, 66, 76, 73, 67, 32, 75, 69, 89, 45, 45, 45, 45, 45, 10}
)

// RsaEncrypt rsa encrypt
func RsaEncrypt(plaintext, publicKey []byte) (ciphertext []byte, err error) {
	// decrypt the public key in pem format
	if len(publicKey) == 0 {
		publicKey = defaultRsaPublicKey
	}
	block, _ := pem.Decode(publicKey)
	if block == nil {
		return nil, errors.New("public key error")
	}
	// parsing the public key
	pubInterface, err := x509.ParsePKIXPublicKey(block.Bytes)
	if err != nil {
		return nil, err
	}
	// types of assertions
	pub, ok := pubInterface.(*rsa.PublicKey)
	if !ok {
		return nil, errors.New("parse public key failed")
	}
	// encode
	return rsa.EncryptPKCS1v15(rand.Reader, pub, plaintext)
}

// RsaDecrypt rsa decrypt
func RsaDecrypt(ciphertext, privateKey []byte) (plaintext []byte, err error) {
	// decode
	if len(privateKey) == 0 {
		privateKey = defaultRsaPrivateKey
	}
	block, _ := pem.Decode(privateKey)
	if block == nil {
		return nil, errors.New("private key error")
	}
	// parse private keys in PKCS8 format
	private, err := x509.ParsePKCS8PrivateKey(block.Bytes)
	if err != nil {
		return nil, err
	}
	priKey, ok := private.(*rsa.PrivateKey)
	if !ok {
		return nil, errors.New("parse private key failed")
	}
	// decode
	return rsa.DecryptPKCS1v15(rand.Reader, priKey, ciphertext)
}

// AesGcmEncrypt Using AES-GCM encrypting byte slice
func AesGcmEncrypt(key, plaintext, additionalData []byte) (ciphertext []byte, nonce []byte, err error) {
	block, err := aes.NewCipher(key)
	if err != nil {
		return nil, nil, err
	}

	// create random nonce
	nonce = make([]byte, 12) // GCM mode common 12 bytes nonce
	if _, err = io.ReadFull(rand.Reader, nonce); err != nil {
		return nil, nil, err
	}

	{
		// random string combined with timestamp
		timestamp := time.Now().UnixNano() & 0xFFFFFFFF
		nonce[8] = byte(timestamp >> 24)
		nonce[9] = byte(timestamp >> 16)
		nonce[10] = byte(timestamp >> 8)
		nonce[11] = byte(timestamp)
	}

	aesGcm, err := cipher.NewGCM(block)
	if err != nil {
		return nil, nil, err
	}

	ciphertext = aesGcm.Seal(nil, nonce, plaintext, additionalData)

	return ciphertext, nonce, nil
}

// AesGcmDecrypt Using AES-GCM decrypting byte slice
func AesGcmDecrypt(key, ciphertext, nonce, additionalData []byte) (plaintext []byte, err error) {
	block, err := aes.NewCipher(key)
	if err != nil {
		return nil, err
	}

	aesGcm, err := cipher.NewGCM(block)
	if err != nil {
		return nil, err
	}

	plaintext, err = aesGcm.Open(nil, nonce, ciphertext, additionalData)
	if err != nil {
		return nil, err
	}

	return plaintext, nil
}

// Md5 MD5
func Md5(plaintext []byte) string {
	hash := md5.New()
	hash.Write(plaintext)
	return hex.EncodeToString(hash.Sum(nil))
}

// Sha1 SHA1
func Sha1(plaintext []byte) string {
	hash := sha1.New()
	hash.Write(plaintext)
	return hex.EncodeToString(hash.Sum(nil))
}

// Sha256 SHA256
func Sha256(plaintext []byte) string {
	hash := sha256.New()
	hash.Write(plaintext)
	return hex.EncodeToString(hash.Sum(nil))
}

// Sha512 SHA512
func Sha512(plaintext []byte) string {
	hash := sha512.New()
	hash.Write(plaintext)
	return hex.EncodeToString(hash.Sum(nil))
}

// HmacSha256 HMAC-SHA256
func HmacSha256(key []byte, plaintext []byte) string {
	h := hmac.New(sha256.New, key)
	_, _ = h.Write(plaintext)
	return hex.EncodeToString(h.Sum(nil))
}
